/*
 * Copyright (c) 2009-2023, Intel Corporation
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Intel Corporation nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef __KASUMI_TEST_VECTORS_H__
#define __KASUMI_TEST_VECTORS_H__

#define MAX_DATA_LEN           (2500)
#define MAX_KEY_LEN            (32)
#define MAX_IV_LEN             (16)
#define NUM_SUPPORTED_BUFFERS  (16)
#define MAX_SIZE_IN_BYTES_1024 (1024)
#define MAX_BIT_BUFFERS        (6)

typedef struct hash_test_vector_s {
        uint8_t input[MAX_DATA_LEN];
        uint32_t lengthInBytes;
        uint8_t key[MAX_DATA_LEN];
        uint32_t keyLenInBytes;
        uint8_t exp_out[IMB_KASUMI_BLOCK_SIZE];
} hash_test_vector_t;

typedef struct hash_iv_test_vector_s {
        uint8_t input[MAX_DATA_LEN];
        uint32_t lengthInBits;
        uint8_t key[MAX_DATA_LEN];
        uint32_t keyLenInBytes;
        uint8_t exp_out[IMB_KASUMI_BLOCK_SIZE];
        uint8_t iv[MAX_DATA_LEN];
        uint32_t ivLenInBytes;
        uint32_t direction;
} hash_iv_test_vector_t;

static hash_test_vector_t kasumi_f9_vectors[] = {
        { /*input*/
          { 0x38, 0xA6, 0xF0, 0x56, 0x05, 0xD2, 0xEC, 0x49, 0x6B, 0x22, 0x77,
            0x37, 0x29, 0x6F, 0x39, 0x3C, 0x80, 0x79, 0x35, 0x3E, 0xDC, 0x87,
            0xE2, 0xE8, 0x05, 0xD2, 0xEC, 0x49, 0xA4, 0xF2, 0xD8, 0xE2 },
          /*inputlength*/
          32,
          /*key*/
          { 0x2B, 0xD6, 0x45, 0x9F, 0x82, 0xC5, 0xB3, 0x00, 0x95, 0x2C, 0x49, 0x10, 0x48, 0x81,
            0xFF, 0x48 },
          /*keylength*/
          16,
          /*expectedout*/
          { 0xF6, 0x3B, 0xD7, 0x2C } },
        { { 0x3E, 0xDC, 0x87, 0xE2, 0xA4, 0xF2, 0xD8, 0xE2, 0xB5, 0x92, 0x43, 0x84, 0x32, 0x8A,
            0x4A, 0xE0, 0x0B, 0x73, 0x71, 0x09, 0xF8, 0xB6, 0xC8, 0xDD, 0x2B, 0x4D, 0xB6, 0x3D,
            0xD5, 0x33, 0x98, 0x1C, 0xEB, 0x19, 0xAA, 0xD5, 0x2A, 0x5B, 0x2B, 0xC3 },
          40,
          { 0xD4, 0x2F, 0x68, 0x24, 0x28, 0x20, 0x1C, 0xAF, 0xCD, 0x9F, 0x97, 0x94, 0x5E, 0x6D,
            0xE7, 0xB7 },
          16,
          { 0xA9, 0xDA, 0xF1, 0xFF } },
        { { 0x14, 0x79, 0x3E, 0x41, 0x03, 0x97, 0xE8, 0xFD, 0xD0, 0xA7, 0xD4, 0x63,
            0xDF, 0x9F, 0xB2, 0xB2, 0x78, 0x83, 0x3F, 0xA0, 0x2E, 0x23, 0x5A, 0xA1,
            0x72, 0xBD, 0x97, 0x0C, 0x14, 0x73, 0xE1, 0x29, 0x07, 0xFB, 0x64, 0x8B,
            0x65, 0x99, 0xAA, 0xA0, 0xB2, 0x4A, 0x03, 0x86, 0x65, 0x42, 0x2B, 0x20,
            0xA4, 0x99, 0x27, 0x6A, 0x50, 0x42, 0x70, 0x09, 0xC0 },
          57,
          { 0xC7, 0x36, 0xC6, 0xAA, 0xB2, 0x2B, 0xFF, 0xF9, 0x1E, 0x26, 0x98, 0xD2, 0xE2, 0x2A,
            0xD5, 0x7E },
          16,
          { 0xDD, 0x7D, 0xFA, 0xDD } },
        { { 0x36, 0xAF, 0x61, 0x44, 0x98, 0x38, 0xF0, 0x3A, 0xB3, 0xD3, 0xC9, 0x17, 0x0A, 0x4E,
            0x16, 0x32, 0xF6, 0x0F, 0x86, 0x10, 0x13, 0xD2, 0x2D, 0x84, 0xB7, 0x26, 0xB6, 0xA2,
            0x78, 0xD8, 0x02, 0xD1, 0xEE, 0xAF, 0x13, 0x21, 0xBA, 0x59, 0x29, 0xDF },
          40,
          { 0x7E, 0x5E, 0x94, 0x43, 0x1E, 0x11, 0xD7, 0x38, 0x28, 0xD7, 0x39, 0xCC, 0x6C, 0xED,
            0x45, 0x73 },
          16,
          { 0x2B, 0xEE, 0xF3, 0xAC }

        },
        { { 0x36, 0xAF, 0x61, 0x44, 0x98, 0x38, 0xF0, 0x3A, 0x59, 0x32, 0xBC, 0x0A, 0xCE,
            0x2B, 0x0A, 0xBA, 0x33, 0xD8, 0xAC, 0x18, 0x8A, 0xC5, 0x4F, 0x34, 0x6F, 0xAD,
            0x10, 0xBF, 0x9D, 0xEE, 0x29, 0x20, 0xB4, 0x3B, 0xD0, 0xC5, 0x3A, 0x91, 0x5C,
            0xB7, 0xDF, 0x6C, 0xAA, 0x72, 0x05, 0x3A, 0xBF, 0xF3, 0x80 },
          49,
          { 0xFD, 0xB9, 0xCF, 0xDF, 0x28, 0x93, 0x6C, 0xC4, 0x83, 0xA3, 0x18, 0x69, 0xD8, 0x1B,
            0x8F, 0xAB },
          16,
          { 0x15, 0x37, 0xD3, 0x16 } },
        { { 0x36, 0xAF, 0x61, 0x44, 0x98, 0x38, 0xF0, 0x3A, 0xD3, 0xC5, 0x38, 0x39,
            0x62, 0x68, 0x20, 0x71, 0x77, 0x65, 0x66, 0x76, 0x20, 0x32, 0x38, 0x37,
            0x63, 0x62, 0x40, 0x98, 0x1B, 0xA6, 0x82, 0x4C, 0x1B, 0xFB, 0x1A, 0xB4,
            0x85, 0x47, 0x20, 0x29, 0xB7, 0x1D, 0x80, 0x8C, 0xE3, 0x3E, 0x2C, 0xC3,
            0xC0, 0xB5, 0xFC, 0x1F, 0x3D, 0xE8, 0xA6, 0xDC, 0x80 },
          57,
          { 0x68, 0x32, 0xA6, 0x5C, 0xFF, 0x44, 0x73, 0x62, 0x1E, 0xBD, 0xD4, 0xBA, 0x26, 0xA9,
            0x21, 0xFE },
          16,
          { 0x8B, 0x2D, 0x57, 0x0F } },
        { { 0xC7, 0x59, 0x0E, 0xA9, 0x57, 0xD5, 0xDF, 0x7D, 0xBB, 0xB0, 0x57, 0x03, 0x88,
            0x09, 0x49, 0x6B, 0xCF, 0xF8, 0x6D, 0x6F, 0xBC, 0x8C, 0xE5, 0xB1, 0x35, 0xA0,
            0x6B, 0x16, 0x60, 0x54, 0xF2, 0xD5, 0x65, 0xBE, 0x8A, 0xCE, 0x75, 0xDC, 0x85,
            0x1E, 0x0B, 0xCD, 0xD8, 0xF0, 0x71, 0x41, 0xC4, 0x95, 0x87, 0x2F, 0xB5, 0xD8,
            0xC0, 0xC6, 0x6A, 0x8B, 0x6D, 0xA5, 0x56, 0x66, 0x3E, 0x4E, 0x46, 0x12, 0x05,
            0xD8, 0x45, 0x80, 0xBE, 0xE5, 0xBC, 0x7E, 0x80 },
          73,
          { 0xD3, 0x41, 0x9B, 0xE8, 0x21, 0x08, 0x7A, 0xCD, 0x02, 0x12, 0x3A, 0x92, 0x48, 0x03,
            0x33, 0x59 },
          16,
          { 0x02, 0x15, 0x81, 0x70 } },
        { { 0x36, 0xAF, 0x61, 0x44, 0x4F, 0x30, 0x2A, 0xD2, 0x35, 0xC6, 0x87, 0x16, 0x63, 0x3C,
            0x66, 0xFB, 0x75, 0x0C, 0x26, 0x68, 0x65, 0xD5, 0x3C, 0x11, 0xEA, 0x05, 0xB1, 0xE9,
            0xFA, 0x49, 0xC8, 0x39, 0x8D, 0x48, 0xE1, 0xEF, 0xA5, 0x90, 0x9D, 0x39, 0x47, 0x90,
            0x28, 0x37, 0xF5, 0xAE, 0x96, 0xD5, 0xA0, 0x5B, 0xC8, 0xD6, 0x1C, 0xA8, 0xDB, 0xEF,
            0x1B, 0x13, 0xA4, 0xB4, 0xAB, 0xFE, 0x4F, 0xB1, 0x00, 0x60, 0x45, 0xB6, 0x74, 0xBB,
            0x54, 0x72, 0x93, 0x04, 0xC3, 0x82, 0xBE, 0x53, 0xA5, 0xAF, 0x05, 0x55, 0x61, 0x76,
            0xF6, 0xEA, 0xA2, 0xEF, 0x1D, 0x05, 0xE4, 0xB0, 0x83, 0x18, 0x1E, 0xE6, 0x74, 0xCD,
            0xA5, 0xA4, 0x85, 0xF7, 0x4D, 0x7A, 0xC0 },
          105,
          { 0x83, 0xFD, 0x23, 0xA2, 0x44, 0xA7, 0x4C, 0xF3, 0x58, 0xDA, 0x30, 0x19, 0xF1, 0x72,
            0x26, 0x35 },
          16,
          { 0x95, 0xAE, 0x41, 0xBA } },
        { { 0x29, 0x6F, 0x39, 0x3C, 0x6B, 0x22, 0x77, 0x37, 0x10, 0xBF, 0xFF, 0x83, 0x9E, 0x0C,
            0x71, 0x65, 0x8D, 0xBB, 0x2D, 0x17, 0x07, 0xE1, 0x45, 0x72, 0x4F, 0x41, 0xC1, 0x6F,
            0x48, 0xBF, 0x40, 0x3C, 0x3B, 0x18, 0xE3, 0x8F, 0xD5, 0xD1, 0x66, 0x3B, 0x6F, 0x6D,
            0x90, 0x01, 0x93, 0xE3, 0xCE, 0xA8, 0xBB, 0x4F, 0x1B, 0x4F, 0x5B, 0xE8, 0x22, 0x03,
            0x22, 0x32, 0xA7, 0x8D, 0x7D, 0x75, 0x23, 0x8D, 0x5E, 0x6D, 0xAE, 0xCD, 0x3B, 0x43,
            0x22, 0xCF, 0x59, 0xBC, 0x7E, 0xA8, 0x4A, 0xB1, 0x88, 0x11, 0xB5, 0xBF, 0xB7, 0xBC,
            0x55, 0x3F, 0x4F, 0xE4, 0x44, 0x78, 0xCE, 0x28, 0x7A, 0x14, 0x87, 0x99, 0x90, 0xD1,
            0x8D, 0x12, 0xCA, 0x79, 0xD2, 0xC8, 0x55, 0x14, 0x90, 0x21, 0xCD, 0x5C, 0xE8, 0xCA,
            0x03, 0x71, 0xCA, 0x04, 0xFC, 0xCE, 0x14, 0x3E, 0x3D, 0x7C, 0xFE, 0xE9, 0x45, 0x85,
            0xB5, 0x88, 0x5C, 0xAC, 0x46, 0x06, 0x8B, 0xC0 },
          134,
          { 0xF4, 0xEB, 0xEC, 0x69, 0xE7, 0x3E, 0xAF, 0x2E, 0xB2, 0xCF, 0x6A, 0xF4, 0xB3, 0x12,
            0x0F, 0xFD },
          16,
          { 0xC3, 0x83, 0x83, 0x9D } },
        { { 0x78, 0x27, 0xFA, 0xB2, 0xA5, 0x6C, 0x6C, 0xA2, 0x70, 0xDE, 0xDF, 0x2D, 0xC4, 0x2C,
            0x5C, 0xBD, 0x3A, 0x96, 0xF8, 0xA0, 0xB1, 0x14, 0x18, 0xB3, 0x60, 0x8D, 0x57, 0x33,
            0x60, 0x4A, 0x2C, 0xD3, 0x6A, 0xAB, 0xC7, 0x0C, 0xE3, 0x19, 0x3B, 0xB5, 0x15, 0x3B,
            0xE2, 0xD3, 0xC0, 0x6D, 0xFD, 0xB2, 0xD1, 0x6E, 0x9C, 0x35, 0x71, 0x58, 0xBE, 0x6A,
            0x41, 0xD6, 0xB8, 0x61, 0xE4, 0x91, 0xDB, 0x3F, 0xBF, 0xEB, 0x51, 0x8E, 0xFC, 0xF0,
            0x48, 0xD7, 0xD5, 0x89, 0x53, 0x73, 0x0F, 0xF3, 0x0C, 0x9E, 0xC4, 0x70, 0xFF, 0xCD,
            0x66, 0x3D, 0xC3, 0x42, 0x01, 0xC3, 0x6A, 0xDD, 0xC0, 0x11, 0x1C, 0x35, 0xB3, 0x8A,
            0xFE, 0xE7, 0xCF, 0xDB, 0x58, 0x2E, 0x37, 0x31, 0xF8, 0xB4, 0xBA, 0xA8, 0xD1, 0xA8,
            0x9C, 0x06, 0xE8, 0x11, 0x99, 0xA9, 0x71, 0x62, 0x27, 0xBE, 0x34, 0x4E, 0xFC, 0xB4,
            0x36, 0xDD, 0xD0, 0xF0, 0x96, 0xC0, 0x64, 0xC3, 0xB5, 0xE2, 0xC3, 0x99, 0x99, 0x3F,
            0xC7, 0x73, 0x94, 0xF9, 0xE0, 0x97, 0x20, 0xA8, 0x11, 0x85, 0x0E, 0xF2, 0x3B, 0x2E,
            0xE0, 0x5D, 0x9E, 0x61, 0x73, 0x60, 0x9D, 0x86, 0xE1, 0xC0, 0xC1, 0x8E, 0xA5, 0x1A,
            0x01, 0x2A, 0x00, 0xBB, 0x41, 0x3B, 0x9C, 0xB8, 0x18, 0x8A, 0x70, 0x3C, 0xD6, 0xBA,
            0xE3, 0x1C, 0xC6, 0x7B, 0x34, 0xB1, 0xB0, 0x00, 0x19, 0xE6, 0xA2, 0xB2, 0xA6, 0x90,
            0xF0, 0x26, 0x71, 0xFE, 0x7C, 0x9E, 0xF8, 0xDE, 0xC0, 0x09, 0x4E, 0x53, 0x37, 0x63,
            0x47, 0x8D, 0x58, 0xD2, 0xC5, 0xF5, 0xB8, 0x27, 0xA0, 0x14, 0x8C, 0x59, 0x48, 0xA9,
            0x69, 0x31, 0xAC, 0xF8, 0x4F, 0x46, 0x5A, 0x64, 0xE6, 0x2C, 0xE7, 0x40, 0x07, 0xE9,
            0x91, 0xE3, 0x7E, 0xA8, 0x23, 0xFA, 0x0F, 0xB2, 0x19, 0x23, 0xB7, 0x99, 0x05, 0xB7,
            0x33, 0xB6, 0x31, 0xE6, 0xC7, 0xD6, 0x86, 0x0A, 0x38, 0x31, 0xAC, 0x35, 0x1A, 0x9C,
            0x73, 0x0C, 0x52, 0xFF, 0x72, 0xD9, 0xD3, 0x08, 0xEE, 0xDB, 0xAB, 0x21, 0xFD, 0xE1,
            0x43, 0xA0, 0xEA, 0x17, 0xE2, 0x3E, 0xDC, 0x1F, 0x74, 0xCB, 0xB3, 0x63, 0x8A, 0x20,
            0x33, 0xAA, 0xA1, 0x54, 0x64, 0xEA, 0xA7, 0x33, 0x38, 0x5D, 0xBB, 0xEB, 0x6F, 0xD7,
            0x35, 0x09, 0xB8, 0x57, 0xE6, 0xA4, 0x19, 0xDC, 0xA1, 0xD8, 0x90, 0x7A, 0xF9, 0x77,
            0xFB, 0xAC, 0x4D, 0xFA, 0x35, 0xEF },
          328,
          { 0x5D, 0x0A, 0x80, 0xD8, 0x13, 0x4A, 0xE1, 0x96, 0x77, 0x82, 0x4B, 0x67, 0x1E, 0x83,
            0x8A, 0xF4 },
          16,
          { 0x3A, 0xE4, 0xBF, 0xF3 } }
};

static hash_iv_test_vector_t kasumi_f9_IV_vectors[] = {
        {
                /* 3GPP specs Test Set 1 */
                /*input*/
                { 0x6B, 0x22, 0x77, 0x37, 0x29, 0x6F, 0x39, 0x3C, 0x80, 0x79, 0x35, 0x3E,
                  0xDC, 0x87, 0xE2, 0xE8, 0x05, 0xD2, 0xEC, 0x49, 0xA4, 0xF2, 0xD8, 0xE0 },
                /*length*/
                189,
                /*key*/
                { 0x2B, 0xD6, 0x45, 0x9F, 0x82, 0xC5, 0xB3, 0x00, 0x95, 0x2C, 0x49, 0x10, 0x48,
                  0x81, 0xFF, 0x48 },
                /*KeyLeninBytes*/
                16,
                /*exp out*/
                { 0xF6, 0x3B, 0xD7, 0x2C },
                /*iv*/
                { 0x38, 0xA6, 0xF0, 0x56, 0x05, 0xD2, 0xEC, 0x49 },
                /*ivLeninbytes*/
                8,
                /*direction*/
                0,
        },
        {
                /* 3GPP specs Test Set 2 */
                /*input*/
                { 0xB5, 0x92, 0x43, 0x84, 0x32, 0x8A, 0x4A, 0xE0, 0x0B, 0x73, 0x71,
                  0x09, 0xF8, 0xB6, 0xC8, 0xDD, 0x2B, 0x4D, 0xB6, 0x3D, 0xD5, 0x33,
                  0x98, 0x1C, 0xEB, 0x19, 0xAA, 0xD5, 0x2A, 0x5B, 0x2B, 0xC0 },
                /*length*/
                254,
                /*key*/
                { 0xD4, 0x2F, 0x68, 0x24, 0x28, 0x20, 0x1C, 0xAF, 0xCD, 0x9F, 0x97, 0x94, 0x5E,
                  0x6D, 0xE7, 0xB7 },
                /*KeyLeninBytes*/
                16,
                /*exp out*/
                { 0xA9, 0xDA, 0xF1, 0xFF },
                /*iv*/
                { 0x3E, 0xDC, 0x87, 0xE2, 0xA4, 0xF2, 0xD8, 0xE2 },
                /*ivLeninbytes*/
                8,
                /*direction*/
                1,
        },
        {
                /* 3GPP specs Test Set 3 */
                /*input*/
                { 0x59, 0x32, 0xBC, 0x0A, 0xCE, 0x2B, 0x0A, 0xBA, 0x33, 0xD8,
                  0xAC, 0x18, 0x8A, 0xC5, 0x4F, 0x34, 0x6F, 0xAD, 0x10, 0xBF,
                  0x9D, 0xEE, 0x29, 0x20, 0xB4, 0x3B, 0xD0, 0xC5, 0x3A, 0x91,
                  0x5C, 0xB7, 0xDF, 0x6C, 0xAA, 0x72, 0x05, 0x3A, 0xBF, 0xF2 },
                /*length*/
                319,
                /*key*/
                { 0xFD, 0xB9, 0xCF, 0xDF, 0x28, 0x93, 0x6C, 0xC4, 0x83, 0xA3, 0x18, 0x69, 0xD8,
                  0x1B, 0x8F, 0xAB },
                /*KeyLeninBytes*/
                16,
                /*exp out*/
                { 0x15, 0x37, 0xD3, 0x16 },
                /*iv*/
                { 0x36, 0xAF, 0x61, 0x44, 0x98, 0x38, 0xF0, 0x3A },
                /*ivLeninbytes*/
                8,
                /*direction*/
                1,
        },
        {
                /* 3GPP specs Test Set 4 */
                /*input*/
                { 0xD0, 0xA7, 0xD4, 0x63, 0xDF, 0x9F, 0xB2, 0xB2, 0x78, 0x83, 0x3F, 0xA0,
                  0x2E, 0x23, 0x5A, 0xA1, 0x72, 0xBD, 0x97, 0x0C, 0x14, 0x73, 0xE1, 0x29,
                  0x07, 0xFB, 0x64, 0x8B, 0x65, 0x99, 0xAA, 0xA0, 0xB2, 0x4A, 0x03, 0x86,
                  0x65, 0x42, 0x2B, 0x20, 0xA4, 0x99, 0x27, 0x6A, 0x50, 0x42, 0x70, 0x09 },
                /*length*/
                384,
                /*key*/
                { 0xC7, 0x36, 0xC6, 0xAA, 0xB2, 0x2B, 0xFF, 0xF9, 0x1E, 0x26, 0x98, 0xD2, 0xE2,
                  0x2A, 0xD5, 0x7E },
                /*KeyLeninBytes*/
                16,
                /*exp out*/
                { 0xDD, 0x7D, 0xFA, 0xDD },
                /*iv*/
                { 0x14, 0x79, 0x3E, 0x41, 0x03, 0x97, 0xE8, 0xFD },
                /*ivLeninbytes*/
                8,
                /*direction*/
                1,
        },
        {
                /* 3GPP specs Test Set 5 */
                /*input*/
                { 0x10, 0xBF, 0xFF, 0x83, 0x9E, 0x0C, 0x71, 0x65, 0x8D, 0xBB, 0x2D, 0x17, 0x07,
                  0xE1, 0x45, 0x72, 0x4F, 0x41, 0xC1, 0x6F, 0x48, 0xBF, 0x40, 0x3C, 0x3B, 0x18,
                  0xE3, 0x8F, 0xD5, 0xD1, 0x66, 0x3B, 0x6F, 0x6D, 0x90, 0x01, 0x93, 0xE3, 0xCE,
                  0xA8, 0xBB, 0x4F, 0x1B, 0x4F, 0x5B, 0xE8, 0x22, 0x03, 0x22, 0x32, 0xA7, 0x8D,
                  0x7D, 0x75, 0x23, 0x8D, 0x5E, 0x6D, 0xAE, 0xCD, 0x3B, 0x43, 0x22, 0xCF, 0x59,
                  0xBC, 0x7E, 0xA8, 0x4A, 0xB1, 0x88, 0x11, 0xB5, 0xBF, 0xB7, 0xBC, 0x55, 0x3F,
                  0x4F, 0xE4, 0x44, 0x78, 0xCE, 0x28, 0x7A, 0x14, 0x87, 0x99, 0x90, 0xD1, 0x8D,
                  0x12, 0xCA, 0x79, 0xD2, 0xC8, 0x55, 0x14, 0x90, 0x21, 0xCD, 0x5C, 0xE8, 0xCA,
                  0x03, 0x71, 0xCA, 0x04, 0xFC, 0xCE, 0x14, 0x3E, 0x3D, 0x7C, 0xFE, 0xE9, 0x45,
                  0x85, 0xB5, 0x88, 0x5C, 0xAC, 0x46, 0x06, 0x8B },
                /*length*/
                1000,
                /*key*/
                { 0xF4, 0xEB, 0xEC, 0x69, 0xE7, 0x3E, 0xAF, 0x2E, 0xB2, 0xCF, 0x6A, 0xF4, 0xB3,
                  0x12, 0x0F, 0xFD },
                /*KeyLeninBytes*/
                16,
                /*exp out*/
                { 0xC3, 0x83, 0x83, 0x9D },
                /*iv*/
                { 0x29, 0x6F, 0x39, 0x3C, 0x6B, 0x22, 0x77, 0x37 },
                /*ivLeninbytes*/
                8,
                /*direction*/
                1,
        }
};

const uint32_t numHashTestVectors[] = { sizeof(kasumi_f9_vectors) / sizeof(hash_test_vector_t),
                                        sizeof(kasumi_f9_IV_vectors) /
                                                sizeof(hash_iv_test_vector_t) };

#endif /*__KASUMI_TEST_VECTORS_H__*/
